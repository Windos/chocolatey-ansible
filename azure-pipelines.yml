# YAML spec:
# https://aka.ms/yaml

name: '$(Date:yyyyMMdd)$(Rev:.r) (#$(BuildID)) $(TeamProject) ($(SourceBranchName))'

variables:
  ChocoCIClient.labVMName: 'ChocoCIClient'
  ChocoCIClient.labVMUserName: 'ansible'
# ChocoCIClient.labVMPassword: <secret>
  ChocoCIClient.ansibleUser: 'ansible-test'
# ChocoCIClient.ansiblePassword: <secret>
  CollectionArtifactName: 'chocolatey.collection'
  Package.Version: 1.0.0

trigger:
  batch: true
  branches:
    include:
      - master
  tags:
    include:
      - '*'

pr:
  - master

stages:
- stage: Build
  displayName: '[Build]'
  jobs:
  - job: BuildCollection
    displayName: 'Build chocolatey.chocolatey collection'
    pool:
      vmImage: ubuntu-latest
    variables:
      Ansible.Package: "ansible-core==2.11"

    steps:
    - task: Bash@3
      displayName: 'Install Dependencies'
      inputs:
        targetType: filePath
        filePath: ./build/dependencies.sh

    - task: PowerShell@2
      displayName: 'Build Collection'

      inputs:
        targetType: 'inline'
        script: |
          $version = if ("$(Build.SourceBranch)" -match '^refs/tags/(?<Tag>.+)') {
              # Github version tags usually begin with a "v", but we just want the number
              $matches.Tag -replace '^v'
          }
          else {
              "$env:PACKAGE_VERSION-$(Get-Date -Format 'yyyyMMdd')-$(New-Guid)"
          }

          Write-Host "Building chocolatey.chocolatey with version '$version'"

          Set-Location ./chocolatey

          (Get-Content -Path 'galaxy.yml' -Raw) -replace '{{ REPLACE_VERSION }}', $version |
              Set-Content -Path 'galaxy.yml'

          ansible-galaxy collection build

          # Locate the built tarball and expose the path & name in Azure variables
          $CollectionTarball = Get-ChildItem -Recurse -File -Filter '*chocolatey*.tar.gz'

          Write-Host "Setting artifact path to '$($CollectionTarball.FullName)'"
          Write-Host "##vso[task.setvariable variable=ArtifactPath]$($CollectionTarball.FullName)"

        errorActionPreference: 'stop'
        failOnStderr: true
        pwsh: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Collection Tarball Artifact'
      inputs:
        path: '$(ArtifactPath)'
        artifact: '$(CollectionArtifactName)'

- stage: Test
  displayName: '[Test]'
  jobs:
  - job: CreateVMClient
    displayName: 'Create Windows Client VM'
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: PowerShell@2
      displayName: 'Set Client VM Name'

      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.setvariable variable=ChocoCIClient.labVMName]$(Get-Date -AsUtc -Format "CyyyyMMddHHmmss")"

        errorActionPreference: 'stop'
        failOnStderr: true
        pwsh: true

    - task: AzureDevTestLabsCreateVM@3
      name: AzureClientVM
      displayName: 'Create Azure Labs Client VM'
      inputs:
        azureSubscription: 'Microsoft Azure Sponsorship - choco-ci'
        LabId: '/subscriptions/b0c8980f-7aed-4e8c-9e21-421d0cfbef9f/resourceGroups/choco-ci/providers/Microsoft.DevTestLab/labs/ChocoAnsibleLab'
        VirtualMachineName: '$(ChocoCIClient.labVMName)'
        TemplateFile: 'build/azure/client-template.json'
        ParameterOverrides: '-newVMName ''$(ChocoCIClient.labVMName)'' -userName ''$(ChocoCIClient.labVMUserName)'' -password ''$(ChocoCIClient.labVMPassword)'' -Configure_WinRM_hostName ''$(ChocoCIClient.labVMFqdn)'''

    - task: AzurePowerShell@4
      displayName: 'Client VM Setup'
      name: AzVmClientConfig
      inputs:
        azureSubscription: 'Microsoft Azure Sponsorship - choco-ci'
        ScriptPath: 'build/azure/Set-AzLabVMParams.ps1'
        ScriptArguments: '-LabVMId $(AzureClientVM.labVmId) -Username $(ChocoCIClient.ansibleUser) -Secret $(ChocoCIClient.ansiblePassword)'
        azurePowerShellVersion: LatestVersion

  - job: Tests
    displayName: 'Test Collection'
    dependsOn: CreateVMClient
    pool:
      vmImage: ubuntu-latest
    variables:
      labVmFqdn: $[ dependencies.CreateVMClient.outputs['AzVmClientConfig.Fqdn'] ]
    strategy:
      maxParallel: 1
      matrix:
        ansible213:
          Ansible.Package: "ansible-core==2.13"
          Ansible.Version: "2.13"
        ansible214:
          Ansible.Package: "ansible-core==2.14"
          Ansible.Version: "2.14"
        ansible215:
          Ansible.Package: "ansible-core==2.15"
          Ansible.Version: "2.15"
        ansible-latest:
          Ansible.Package: "ansible-core"
          Ansible.Version: "latest"

    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Collection'
      inputs:
        artifact: '$(CollectionArtifactName)'
        targetPath: '$(System.DefaultWorkingDirectory)/chocolatey/'

    - task: Bash@3
      displayName: 'Install Dependencies'
      inputs:
        targetType: filePath
        filePath: ./build/dependencies.sh

    - task: AzureCLI@2
      displayName: 'Run Ansible-Test for Collection'
      name: TestRun
      inputs:
        azureSubscription: 'Microsoft Azure Sponsorship - choco-ci'
        scriptType: pscore
        scriptPath: 'build/Invoke-CollectionTests.ps1'
        arguments: '-IsCIBuild -Username $(ChocoCIClient.ansibleUser) -ComputerName $(labVMFqdn) -Secret $(ChocoCIClient.ansiblePassword)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Ansible-Test Output Artifact'
      condition: succeededOrFailed()
      inputs:
        path: '$(System.DefaultWorkingDirectory)/testresults'
        artifact: 'Ansible-Test Output Files (ansible-$(Ansible.Version))'

    - task: PublishTestResults@2
      displayName: 'Publish JUnit Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
        testResultsFiles: '**/*.xml'
        publishRunAttachments: true
        failTaskOnFailedTests: true

  - job: DestroyVMClient
    displayName: 'Destroy Azure Labs Client VM'
    pool:
      vmImage: ubuntu-latest
    dependsOn:
      - CreateVMClient
      - Tests
    condition: always()
    variables:
      labVmId: $[ dependencies.CreateVMClient.outputs['AzureClientVM.labVmId'] ]

    steps:
    - task: AzureDevTestLabsDeleteVM@3
      displayName: 'Destroy Client VM'
      inputs:
        azureSubscription: 'Microsoft Azure Sponsorship - choco-ci'
        LabId: '/subscriptions/b0c8980f-7aed-4e8c-9e21-421d0cfbef9f/resourceGroups/choco-ci/providers/Microsoft.DevTestLab/labs/ChocoAnsibleLab'
        LabVmId: '$(labVmId)'
      continueOnError: true

  - job: CreateVMServer
    displayName: 'Create Windows Server VM'
    pool:
      vmImage: ubuntu-latest
    dependsOn:
      - DestroyVMClient

    steps:
    - task: PowerShell@2
      displayName: 'Set Server VM Name'

      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.setvariable variable=ChocoCIClient.labVMName]$(Get-Date -AsUtc -Format "CyyyyMMddHHmmss")"

        errorActionPreference: 'stop'
        failOnStderr: true
        pwsh: true

    - task: AzureDevTestLabsCreateVM@3
      name: AzureServerVM
      displayName: 'Create Azure Labs Server VM'
      inputs:
        azureSubscription: 'Microsoft Azure Sponsorship - choco-ci'
        LabId: '/subscriptions/b0c8980f-7aed-4e8c-9e21-421d0cfbef9f/resourceGroups/choco-ci/providers/Microsoft.DevTestLab/labs/ChocoAnsibleLab'
        VirtualMachineName: '$(ChocoCIClient.labVMName)'
        TemplateFile: 'build/azure/server-template.json'
        ParameterOverrides: '-newVMName ''$(ChocoCIClient.labVMName)'' -userName ''$(ChocoCIClient.labVMUserName)'' -password ''$(ChocoCIClient.labVMPassword)'' -Configure_WinRM_hostName ''$(ChocoCIClient.labVMFqdn)'''

    - task: AzurePowerShell@4
      displayName: 'Server VM Setup'
      name: AzVmServerConfig
      inputs:
        azureSubscription: 'Microsoft Azure Sponsorship - choco-ci'
        ScriptPath: 'build/azure/Set-AzLabVMParams.ps1'
        ScriptArguments: '-LabVMId $(AzureServerVM.labVmId) -Username $(ChocoCIClient.ansibleUser) -Secret $(ChocoCIClient.ansiblePassword)'
        azurePowerShellVersion: LatestVersion

  - job: TestChocoV2Dependency
    displayName: 'Test Chocolatey CLI v2 Dependency'
    dependsOn: CreateVMServer
    pool:
      vmImage: ubuntu-latest
    variables:
      labVmFqdn: $[ dependencies.CreateVMServer.outputs['AzVmServerConfig.Fqdn'] ]
      Ansible.Package: "ansible-core"
      Ansible.Version: "latest"

    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Collection'
      inputs:
        artifact: '$(CollectionArtifactName)'
        targetPath: '$(System.DefaultWorkingDirectory)/chocolatey/'

    - task: Bash@3
      displayName: 'Install Dependencies'
      inputs:
        targetType: filePath
        filePath: ./build/dependencies.sh

    - task: AzureCLI@2
      displayName: 'Run Ansible-Test for Chocolatey CLI v2 Dependency'
      name: TestRun
      inputs:
        azureSubscription: 'Microsoft Azure Sponsorship - choco-ci'
        scriptType: pscore
        scriptPath: 'build/Invoke-CollectionTests.ps1'
        arguments: '-IsCIBuild -Username $(ChocoCIClient.ansibleUser) -ComputerName $(labVMFqdn) -Secret $(ChocoCIClient.ansiblePassword) -TestLegacyOs'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Ansible-Test Output Artifact'
      condition: succeededOrFailed()
      inputs:
        path: '$(System.DefaultWorkingDirectory)/testresults'
        artifact: 'Ansible-Test Output Files (Chocolatey CLI v2 Dependency)'

    - task: PublishTestResults@2
      displayName: 'Publish JUnit Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
        testResultsFiles: '**/*.xml'
        publishRunAttachments: true
        failTaskOnFailedTests: true

  - job: DestroyVMServer
    displayName: 'Destroy Azure Labs Server VM'
    pool:
      vmImage: ubuntu-latest
    dependsOn:
      - CreateVMServer
      - TestChocoV2Dependency
    condition: always()
    variables:
      labVmId: $[ dependencies.CreateVMServer.outputs['AzureServerVM.labVmId'] ]

    steps:
    - task: AzureDevTestLabsDeleteVM@3
      displayName: 'Destroy Server VM'
      inputs:
        azureSubscription: 'Microsoft Azure Sponsorship - choco-ci'
        LabId: '/subscriptions/b0c8980f-7aed-4e8c-9e21-421d0cfbef9f/resourceGroups/choco-ci/providers/Microsoft.DevTestLab/labs/ChocoAnsibleLab'
        LabVmId: '$(labVmId)'
      continueOnError: true

- stage: Publish
  displayName: '[Publish]'
  dependsOn:
  - Build
  - Test
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  variables:
    Ansible.Package: 'ansible-core==2.14'

  jobs:
  - job: Publish
    displayName: 'Publish Chocolatey Collection'
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: Bash@3
      displayName: 'Install Dependencies'
      inputs:
        targetType: filePath
        filePath: ./build/dependencies.sh

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Tarball Artifact'
      inputs:
        artifact: '$(CollectionArtifactName)'
        targetPath: '$(System.DefaultWorkingDirectory)/artifacts/'

    - task: PowerShell@2
      displayName: 'Publish Chocolatey Collection to Galaxy & AH'
      inputs:
        pwsh: true
        targetType: filePath
        filePath: ./build/Publish-Collection.ps1
      env:
        ANSIBLE_CONFIG: '$(System.DefaultWorkingDirectory)/build/ansible.cfg'
        ANSIBLE_GALAXY_SERVER_RELEASE_GALAXY_TOKEN: '$(GalaxyApiKey)'
        ANSIBLE_GALAXY_SERVER_AUTOMATION_HUB_TOKEN: '$(AHApiKey)'
